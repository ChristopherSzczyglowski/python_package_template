# CircleCI configuration script for Python package template
#
# In this config file we define a single workflow `setup-test-build` that
# runs the jobs necessary to
#   - check the code formatting (pre-commit)
#   - install the dependencies (setup-env)
#   - check the code style and check types (linting)
#   - run the test suite (unit-tests)
#   - check for security vulnerabilities (security)
#   - build the distribution files (build-dist)
#   - build the documentation (build-docs)
#
# The outputs of this process are the distribution files for the python
# application (source and built) and the documentation files rendered as HTML.
#
# Resources:
#   - CircleCI Python example config file
#     + https://circleci.com/docs/2.0/language-python/
#   - CircleCI workflow overview file
#     + https://circleci.com/docs/2.0/workflows/
#   - CircleCI Orb overview
#     + https://circleci.com/developer/orbs/orb/codecov/codecov
#   - Using caches in CircleCI
#     + https://circleci.com/docs/2.0/caching/
#   - Stored test data in CircleCI
#     + https://circleci.com/docs/2.0/collect-test-data/

version: 2.1

orbs:
  # https://circleci.com/developer/orbs/orb/codecov/codecov
  codecov: codecov/codecov@1.2.5

# See: https://circleci.com/docs/2.0/workflows/
workflows:
  version: 2
  setup-test-build:
    jobs:
      - pre-commit
      - setup-env:
          requires:
            - pre-commit
      - linting:
          requires:
            - setup-env
      - unit-tests:
          requires:
            - setup-env
      - security:
          requires:
            - setup-env
      - build-dist:
          requires:
            - linting
            - unit-tests
            - security
      - build-docs:
          requires:
              - linting
              - unit-tests
              - security

commands:
  restore_all_dependency_cache:
    steps:
      - restore_cache:
        # Use a partial key match to pick up the cache created in `setup-env`
        # - See: https://circleci.com/docs/2.0/caching/#writing-to-the-cache-in-workflows
          key: all-deps-
      - run: . ./env/bin/activate

jobs:
  pre-commit:
    # Runs pre-commit checks on the repository
    docker:
      - image: cimg/python:3.9
    resource_class: small
    steps:
      - checkout
      - run:
          name: install pre-commit
          command: |
            python3 -m pip install pre-commit
      - run:
          name: store config data
          # Copy the pre-commit config YAML into the a new file then append
          # the python version
          # - This prevents the cache being used if we upgrade the python ver
          command: |
            cp .pre-commit-config.yaml pre-commit-cache-key.txt
            python --version --version >> pre-commit-cache-key.txt
      - restore_cache:
          key: pre-commit-cache-{{ checksum "pre-commit-cache-key.txt" }}
      - run:
          name: pre-commit
          # Run pre-commit
          command: |
            python3 -m pre_commit run --all-files
      - save_cache:
          key: pre-commit-cache-{{ checksum "pre-commit-cache-key.txt" }}
          paths:
            - ~/.cache/pre-commit
  setup-env:
    # Provides the environment to run the remaining jobs
    docker:
      - image: cimg/python:3.9
    resource_class: small
    steps:
      - checkout
      - run:
          name: collect dependencies
          # Collect the complete dependency list in a new file
          # which will be used to register the cache
          command: |
            touch requirements-all.txt
            cat requirements.txt >> requirements-all.txt
            cat requirements-dev.txt >> requirements-all.txt
      - restore_cache:
          key: all-deps-{{ checksum "requirements-all.txt"}}
      - run:
          name: install dependencies
          command: |
            python3 -m venv env
            source env/bin/activate
            python3 -m pip install -r requirements.txt -r requirements-dev.txt
      - save_cache:
          key: all-deps-{{ checksum "requirements-all.txt"}}
          paths:
            - "env"
  linting:
    # Performs static checks on the code quality
    docker:
      - image: cimg/python:3.9
    resource_class: small
    steps:
      - checkout
      - restore_all_dependency_cache
      - run:
          name: run pylint
          command: make lint
      - run:
          name: run mypy
          command: make typecheck
  unit-tests:
    # Runs the test framework
    docker:
      - image: cimg/python:3.9
    resource_class: small
    steps:
      - checkout
      - restore_all_dependency_cache
      - run:
          name: run tests
          command: make test-coverage
      - store_test_results:
          # Store the auto-generated reports for further analysis (if required)
          # See: https://circleci.com/docs/2.0/collect-test-data/
          path: reports
      - codecov/upload:
          # Provide a copy of the test coverage report to CodeCov
          file: reports/coverage/test_coverage.xml
  security:
    # Checks for vulnerabilities in the code and dependencies
    docker:
      - image: cimg/python:3.9
    resource_class: small
    steps:
      - checkout
      - restore_all_dependency_cache
      - run:
          name: run bandit
          command: make security-application
      - run:
          name: run safety
          command: make security-dependency
  build-dist:
    # Creates the source and built distribution archives
    docker:
      - image: cimg/python:3.9
    resource_class: small
    steps:
      - checkout
      - restore_all_dependency_cache
      - run:
          name: build distribution archives
          command: make build-dist
      - store_artifacts:
          # Store the build artifacts
          path: dist
  build-docs:
    # Creates the documentation
    docker:
      - image: cimg/python:3.9
    resource_class: small
    steps:
      - checkout
      - restore_all_dependency_cache
      - run:
          name: build docs
          command: make build-docs
      - run:
          name: compress artifacts
          # We compress the artifacts to improve speed and allow all docs to be
          # downloaded as a single file
          command: |
            cd docs
            tar -cvzf docs-html.tar.gz build
      - store_artifacts:
          # Store the build artifacts
          path: docs/docs-html.tar.gz
